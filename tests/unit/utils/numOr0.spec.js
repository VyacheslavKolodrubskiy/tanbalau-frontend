import { numOr0 } from '@/utils/utils';

describe('Проверяем валидные значения', () => {
  test('Передаем число 1, вернётся число 1', () => {
    expect(numOr0(1)).toBe(1);
  });
  test('Передаем число 5000000.000, вернётся число 5000000', () => {
    expect(numOr0(5000000.000)).toBe(5000000);
  });
  test('Передаем число 437.133, вернётся число 437.133', () => {
    expect(numOr0(437.133)).toBeCloseTo(437.133);
  });
  test('Передаем строку "2", вернётся число 2', () => {
    expect(numOr0('2')).toBe(2);
  });
  test('Передаем строку с числом с предшествующими нулями "007", вернётся число 7', () => {
    expect(numOr0('007')).toBe(7);
  });
});

describe('Проверяем не валидные значения', () => {
  test('Передаем строку с невалидным числом "3asd", вернётся число 0', () => {
    expect(numOr0('3asd')).toBe(0);
  });
  test('Передаем пустую строку, вернётся число 0', () => {
    expect(numOr0('')).toBe(0);
  });
  test('Передаем cтроку числом "100 500" со вторым параметром равным true, вернётся число 100500, выбросится исключение', () => {
    expect(() => numOr0('100 500', true)).toThrow();
  });
  test('Передаем null, вернётся число 0', () => {
    expect(numOr0(null)).toBe(0);
  });
  test('Передаем undefined, вернётся число 0', () => {
    expect(numOr0(undefined)).toBe(0);
  });
  test('Передаем пустой объект/массив, вернётся число 0', () => {
    expect(numOr0({})).toBe(0);
    expect(numOr0([])).toBe(0);
  });
});
